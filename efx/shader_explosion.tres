[gd_resource type="VisualShader" load_steps=4 format=3 uid="uid://bsryjna04v0pa"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_2i176"]
input_name = "color"

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_13gve"]
default_input_values = [0, Quaternion(0, 0, 0, 0)]
op_type = 2

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_olvuv"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(0, 0, 0, 0)]
op_type = 2
operator = 2

[resource]
code = "shader_type spatial;



void fragment() {
// Input:2
	vec4 n_out2p0 = COLOR;


// VectorDecompose:3
	float n_out3p0 = n_out2p0.x;
	float n_out3p1 = n_out2p0.y;
	float n_out3p2 = n_out2p0.z;
	float n_out3p3 = n_out2p0.w;


// VectorOp:4
	vec4 n_out4p0 = n_out2p0 * vec4(n_out3p3);


// Output:0
	ALBEDO = vec3(n_out2p0.xyz);
	ALPHA = n_out3p3;
	EMISSION = vec3(n_out4p0.xyz);


}
"
graph_offset = Vector2(-421.552, -17.8623)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_2i176")
nodes/fragment/2/position = Vector2(-580, 180)
nodes/fragment/3/node = SubResource("VisualShaderNodeVectorDecompose_13gve")
nodes/fragment/3/position = Vector2(-280, 360)
nodes/fragment/4/node = SubResource("VisualShaderNodeVectorOp_olvuv")
nodes/fragment/4/position = Vector2(200, 320)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0, 2, 0, 3, 0, 3, 3, 0, 1, 2, 0, 4, 0, 3, 3, 4, 1, 4, 0, 0, 5)
